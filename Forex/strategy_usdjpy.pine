// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© UntitledGoose

//@version=5

// For USD/JPY, deciding entry, exit points.
strategy('usdjpy strategy', overlay=true)
rsi = ta.rsi(close, 14)
atr = ta.atr(14)  // Average true range. 

// Calculate MACD slope.
fastMA = ta.ema(close, 12)
slowMA = ta.ema(close, 26)
macd = fastMA - slowMA
signal = ta.ema(macd, 9)
histogram = macd - signal
radians_to_degrees = 180 / 3.14159265359
lookback_period = input(defval=2, title='Lookback periods')
smoothing = input.int(defval=2, minval=2, title='Smoothing')
macd_slope = radians_to_degrees * math.atan((macd[0] - nz(macd[lookback_period])) / lookback_period)
signal_slope = radians_to_degrees * math.atan((signal[0] - nz(signal[lookback_period])) / lookback_period)
histogram_slope = radians_to_degrees * math.atan((histogram[0] - nz(histogram[lookback_period])) / lookback_period)

// Calculate SMA10, 30 slope.
sma_short = ta.sma(close, 5)
sma_long = ta.sma(close, 15)
sma_short_slope = radians_to_degrees * math.atan((sma_short[0] - nz(sma_short[lookback_period])) / lookback_period)
sma_long_slope = radians_to_degrees * math.atan((sma_long[0] - nz(sma_long[lookback_period])) / lookback_period)

// Bollinger Bands.
length = 14
bb_src = input(close, title = 'Source')
bb_mult = input.float(2.0, minval = 0.001, maxval = 50)
basis = ta.sma(bb_src, length)
dev = bb_mult * ta.stdev(bb_src, length)
bb_upper = basis + dev
bb_lower = basis - dev

// Specify crossover conditions.

// Idea 1: Using sma_short, sma_long cross as entry & exit indicator.
// Result: Decent return. Not stable.
// longCondition = ta.crossover(sma_short, sma_long)  // When sma_short cross above sma_long.
// shortCondition = ta.crossunder(sma_short, sma_long)

// Idea 2: Using RSI cross 30 & 70 as entry & exit indicator.
// Result: Very bad idea.
// longCondition = ta.crossunder(rsi, 30)
// shortCondition = ta.crossover(rsi, 70)

// Idea 3: Using both sma_short, sma_long and RSI cross.
// Result: Not a good idea.
// longCondition = ((sma_short > sma_long) and (rsi < 30))
// shortCondition = ((sma_short < sma_long) and (rsi > 70))

// Idea 4: Using both MACD slope and RSI cross.
// Result: Not a good idea. Conditions too strict, very few trades.
// longCondition = ((macd_slope > signal_slope) and (rsi < 30))
// shortCondition = ((macd_slope < signal_slope) and (rsi > 70))

// Idea 5: Using both MACD slope, sma10&30 slope.
// Result: Good return.
// longCondition = (macd_slope > signal_slope) and (sma_short_slope > sma_long_slope) // and (rsi <= 40)
// shortCondition = (macd_slope < signal_slope) and (rsi >= 60) and (sma_short_slope < sma_long_slope) // and (rsi >= 60)

// Idea 6: Build on Idea 5, add BB boundaries crossover to conditions.
// Result: 
bb_offset = 0.05 // Add this offset, otherwise very few trade.
longCondition = (macd_slope > signal_slope) and (close <= bb_lower + bb_offset) //and (sma_short_slope > sma_long_slope)
shortCondition = (macd_slope < signal_slope) and (close >= bb_upper - bb_offset) //and (sma_short_slope < sma_long_slope)

// Trade execution is determined by crossover / crossunder conditions defined above.
// Use average true range (ATR) to set specific stop losses and take profits.
if longCondition
    stopLoss = close - atr * 2
    takeProfit = close + atr * 2
    strategy.entry('long', strategy.long, 1, when = rsi<50)
    strategy.exit('exit_long', 'long', stop=stopLoss, limit=takeProfit)

if shortCondition
    stopLoss = close + atr * 2
    takeProfit = close - atr * 2
    strategy.entry('short', strategy.short, 1, when = rsi>50)
    strategy.exit('exit_short', 'short', stop=stopLoss, limit=takeProfit)

// Plot.
// SMA.
plot(sma_short, color=color.new(color.orange, 0))
plot(sma_long, color=color.new(color.green, 0))
// BB.
plot(basis, color=color.red)
bb_upper_plot = plot(bb_upper, color=color.blue)
bb_lower_plot = plot(bb_lower, color=color.blue)
fill(bb_upper_plot, bb_lower_plot, color=color.new(color.green, 90))
